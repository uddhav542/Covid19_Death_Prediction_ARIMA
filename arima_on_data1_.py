# -*- coding: utf-8 -*-
"""ARIMA_ON_DATA1 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nrMGIYDViBTkslszealhmzBydSFwVWlg

# ARIMA modelling on Covid 19 Dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from math import sqrt
from sklearn.metrics import mean_squared_error
from pmdarima import auto_arima
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

"""### Read Data"""

df = pd.read_csv(r'Data1.csv')


df.head(5)

"""# Data Preprocessing"""

df =df[(df["Age Group"] == '45-54') & (df["State"] == 'United States') &  (df["Condition Group"] == 'COVID-19') & (df["Condition"] == 'COVID-19') ]
df.head(5)

df = df[["Start Date","COVID-19 Deaths"]]
df.head(5)

df = df.drop_duplicates(subset = ["Start Date"])
df.head(5)

df['Start Date'] = pd.to_datetime(df['Start Date'])
df.sort_values(by='Start Date').head(10)

df.drop('Start Date',axis=1,inplace=True)
df.head(10)

"""# Visualization"""

# df.set_index("Start Date",inplace=True)
index = pd.Index(range(1, 28))
df = df.set_index(index)
plt.plot(df)

from pandas.plotting import autocorrelation_plot
autocorrelation_plot(df)
plt.show()

"""# ARIMA ----------->

### Train / Validation set
"""

train = df[:int(0.7*(len(df)))]
valid = df[int(0.7*(len(df))):]

#pip install pmdarima

"""### Model Fitting and Prediction"""


model = auto_arima(train, trace=True, error_action='ignore', suppress_warnings=True)
model_fit = model.fit(train)

forecast = model.predict(n_periods=len(valid))
forecast = pd.DataFrame(forecast,index = valid.index,columns=['Prediction'])

#plot the predictions for validation set
plt.plot(train, label='Train')
plt.plot(valid, label='Valid')
plt.plot(forecast, label='Prediction')
plt.legend()
plt.show()
print(model_fit.summary())

"""### Error Calculation and ACF / PACF plots -----> """

#calculate rmse


rms = sqrt(mean_squared_error(valid,forecast))

print('Test RMSE: %.4f' % rms)

import numpy as np, pandas as pd

import matplotlib.pyplot as plt
plt.rcParams.update({'figure.figsize':(9,6), 'figure.dpi':90})

# Import data
df = pd.read_csv(r'Data1.csv')

# Original Series
fig, axes = plt.subplots(1,2, sharex=True)
# axes[0, 0].plot(df['COVID-19 Deaths']); axes[0, 0].set_title('Original Series')

# Keeping Derivation Order as 0 ---------->

plot_acf(df['COVID-19 Deaths'], ax=axes[0])
plot_pacf(df['COVID-19 Deaths'], ax=axes[1])

# # 1st Order Differencing
# # axes[1, 0].plot(df['COVID-19 Deaths'].diff()); axes[1, 0].set_title('1st Order Differencing')
#plot_acf(df['COVID-19 Deaths'].diff().dropna(), ax=axes[1,0])
#plot_pacf(df['COVID-19 Deaths'].diff().dropna(), ax=axes[1,1])

# # 2nd Order Differencing
# # axes[2, 0].plot(df['COVID-19 Deaths'].diff().diff()); axes[2, 0].set_title('2nd Order Differencing')
# #plot_acf(df['COVID-19 Deaths'].diff().diff().dropna(), ax=axes[2])

# # axes[3, 0].plot(df['COVID-19 Deaths'].diff().diff()); axes[2, 0].set_title('2nd Order Differencing')
#plot_acf(df['COVID-19 Deaths'].diff().diff().dropna(), ax=axes[2,0])
#plot_pacf(df['COVID-19 Deaths'].diff().diff().dropna(), ax=axes[2,1])



plt.show()

